/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package eu.nbdemetra.specParser;

import ec.nbdemetra.sa.MultiProcessingDocument;
import ec.nbdemetra.ws.WorkspaceItem;
import ec.satoolkit.ISaSpecification;
import ec.tss.sa.EstimationPolicyType;
import ec.tss.sa.SaItem;
import java.awt.Color;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.ListCellRenderer;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.util.Exceptions;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

/**
 * Top component which displays a list of SingleSpecs from the MultiDocument
 */
@ConvertAsProperties(
        dtd = "-//eu.nbdemetra.x13spec//MultiDocSpecWindow//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "MultiDocSpecWindowTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_NEVER
)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "eu.nbdemetra.x13spec.MultiDocSpecWindowTopComponent")

@TopComponent.OpenActionRegistration(
        displayName = "#CTL_MultiDocSpecWindowAction",
        preferredID = "MultiDocSpecWindowTopComponent"
)
@Messages({
    "CTL_MultiDocSpecWindowAction=MultiDocSpecWindow",
    "CTL_MultiDocSpecWindowTopComponent=MultiDocSpecWindow",
    "HINT_MultiDocSpecWindowTopComponent=This is a MultiDocSpecWindow"
})

public final class MultiTopComponent extends TopComponent {

    /* Variables:
     *
     *      open            -   boolean for checking is MultiSpecWindow closed
     *      singleSpecList  -   gets all SingleSpecs from the MultiDocument
     *      activeWindows   -   collects the selected SingleWindows
     *      displayName     -   name of multi document
     */
    private boolean open;
    private ArrayList<SingleSpec> singleSpecList;
    private static Map<Integer, SingleTopComponent> activeWindows = new HashMap();

    private String displayName;
    private WorkspaceItem ws;

    public MultiTopComponent() {

        initComponents();
        setToolTipText(Bundle.HINT_MultiDocSpecWindowTopComponent());
        open = true;
    }

    public MultiTopComponent(WorkspaceItem w) {

        ws = w;
        this.displayName = w.getDisplayName();
        initComponents();
        setToolTipText(Bundle.HINT_MultiDocSpecWindowTopComponent());
        open = true;
    }

    public void setSingleSpecList(ArrayList<SingleSpec> list) {

        this.singleSpecList = list;
        this.setSpecList();
    }

    private void setSpecList() {
        /*  This method fill the list in the window 
         *  with the names of the multi processing documents
         */

        DefaultListModel model = new DefaultListModel();
        for (SingleSpec item : singleSpecList) {
            model.addElement(item);
        }

        specList.setModel(model);
        specList.setCellRenderer(new MyCellRenderer());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        specList = new javax.swing.JList();
        saveAll = new javax.swing.JButton();
        saveGreen = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        errorText = new javax.swing.JTextArea();
        singleSpecName = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        specList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        specList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                specListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(specList);

        org.openide.awt.Mnemonics.setLocalizedText(saveAll, org.openide.util.NbBundle.getMessage(MultiTopComponent.class, "MultiTopComponent.saveAll.text")); // NOI18N
        saveAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAllActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(saveGreen, org.openide.util.NbBundle.getMessage(MultiTopComponent.class, "MultiTopComponent.saveGreen.text")); // NOI18N
        saveGreen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveGreenActionPerformed(evt);
            }
        });

        errorText.setColumns(20);
        errorText.setRows(5);
        errorText.setText(org.openide.util.NbBundle.getMessage(MultiTopComponent.class, "MultiTopComponent.errorText.text")); // NOI18N
        jScrollPane2.setViewportView(errorText);

        org.openide.awt.Mnemonics.setLocalizedText(singleSpecName, org.openide.util.NbBundle.getMessage(MultiTopComponent.class, "MultiTopComponent.singleSpecName.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jButton1, org.openide.util.NbBundle.getMessage(MultiTopComponent.class, "MultiTopComponent.jButton1.text")); // NOI18N
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(singleSpecName)
                            .addComponent(jScrollPane2)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(saveGreen)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(saveAll)
                                .addGap(47, 47, 47)
                                .addComponent(jButton1)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(singleSpecName)
                        .addGap(1, 1, 1)
                        .addComponent(jScrollPane2))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveAll)
                    .addComponent(jButton1))
                .addGap(18, 18, 18)
                .addComponent(saveGreen)
                .addGap(13, 13, 13))
        );
    }// </editor-fold>//GEN-END:initComponents


    private void specListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_specListMouseClicked
        /*  This method opens the SingleSpecWindow of the selected item 
         *  from the list in front, when you click two times or more on the item.
         *  With one click you see information of the SingleSpec transformation 
         *  on the rigth.
         */

        if (evt.getClickCount() >= 2) {
            SingleTopComponent window;
            SingleSpec s = singleSpecList.get(specList.getSelectedIndex());

            int index = singleSpecList.indexOf(s);

            //check for window of selected item in map activeWindows 
            if (!activeWindows.containsKey(index)) {
                window = new SingleTopComponent();
                window.setDisplayName((index + 1) + "");
                window.open();
                window.requestActive();
                activeWindows.put(index, window);
            } else {
                window = activeWindows.get(index);
                if (window.isOpen()) {
                    window.requestActive();
                } else {
                    window.open();
                    window.requestActive();
                }
            }
            //JD+ Specification
            window.setSpecView(s.getSpecCollector());
        } else {
            //transformation information by one click
            //name of the selected document
            singleSpecName.setText(singleSpecList.get(specList.getSelectedIndex()).getSaItem().toString());
            //error list of the translated document
            String[] errors = singleSpecList.get(specList.getSelectedIndex()).getSpecCollector().getErrors();
            if (errors.length != 0) {
                errorText.setText("ERRORS:\n");
                for (String tmp : errors) {
                    errorText.append(tmp + "\n");
                }
            } else {
                errorText.setText("No errors");
            }

        }
    }//GEN-LAST:event_specListMouseClicked

    private void saveAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAllActionPerformed
        /*
         * Thid method saves all (in WinX13) transformed (single) Specs of 
         * the MultiDocument list in a folder.
         */

        String path = System.getProperty("user.home");
        JFileChooser chooser = new JFileChooser(path);
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.showSaveDialog(null);
        try {
            File folder = chooser.getSelectedFile();
            File target = new File(folder + "/" + displayName);
            target.mkdir();

            FileWriter fw;
            int index = 0;
            for (SingleSpec s : singleSpecList) {
                index++;
                fw = new FileWriter(new File(target + "/" + index + ".spc"));
                //hier noch spec schreiben
                fw.write(s.getId() + "");
                fw.close();
            }
        } catch (IOException ex) {
            errorText.setText("Nothing happend\n" + ex.getMessage());
        }
    }//GEN-LAST:event_saveAllActionPerformed

    private void saveGreenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveGreenActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_saveGreenActionPerformed

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        // TODO add your handling code here:JFileChooser fc = new JFileChooser();
        JFileChooser fc = new JFileChooser();
        fc.setFileFilter(new MyFilter(".mta"));
        fc.setAcceptAllFileFilterUsed(false);

        int state = fc.showOpenDialog(null);

        if (state == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();

            try {
                FileReader f = new FileReader(file);
//                StringBuilder s;
                try (BufferedReader brMTA = new BufferedReader(f)) {
//                    s = new StringBuilder();
                    StringBuilder path = new StringBuilder(file.getPath());
                    String tmp = path.substring(0, path.lastIndexOf(file.getName()));
                    

                    String zeile;
                    SpecCollector sp;
                    SaItem item;
                    FileReader singleFile;
                    ArrayList<SingleSpec> s = new ArrayList();
//                    int counter =0;
                    String lineSpec;
                    StringBuilder sb;
                    while ((zeile = brMTA.readLine()) != null) {
                        path = new StringBuilder(tmp);
                        zeile = zeile.trim();
                        singleFile = new FileReader(new File(path.append(zeile + ".SPC").toString()));
                        try (BufferedReader brSpec = new BufferedReader(singleFile)) {
                            sb = new StringBuilder();
                            while ((lineSpec = brSpec.readLine()) != null) {
                                sb.append(lineSpec);
                                sb.append("\n");

                            }
                            //Default x13document wird in spec collector angelegt
                            sp = new SpecCollector(ws);
                            sp.setWinX13Spec(sb.toString());
//                            sp.translate(TranslationTo_Type.JDSpec);

                            item = new SaItem((ISaSpecification) sp.getJDSpec().getSpecification(), null);

                            //hinzufuegen zum workspace
                            ((MultiProcessingDocument) ws.getElement()).getCurrent().add(item);
//                            sp.translate(TranslationTo_Type.JDSpec);
//                            s.add(new SingleSpec(item, ws));
                        }

//                        item.newSpecification(, EstimationPolicyType.None);
                        //oeffne zeile.spc
                        //translate mit SpecCollector arbeiten (WorkspaceItem)
                        //SaItem new Specification: SpecCollector getJDSpec() + estimation PolicyType.None
                        //damit dann SingleSpec
                        //lege neuen eintrag in singlespecliste an
                        System.out.println("sb:" + sb.toString());
//                        counter++;
                    }
                    setSingleSpecList(s);
                }

            } catch (FileNotFoundException ex) {
                Exceptions.printStackTrace(ex);
            } catch (IOException ex) {
                Exceptions.printStackTrace(ex);
            }
        }
    }//GEN-LAST:event_jButton1MouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea errorText;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton saveAll;
    private javax.swing.JButton saveGreen;
    private javax.swing.JLabel singleSpecName;
    private javax.swing.JList specList;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        open = true;
    }

    @Override
    public void componentClosed() {
        open = false;
    }

    public boolean isOpen() {
        /*   This method is for checking wheather the MultiWindow is 
         *   already open or not.
         */
        return open;
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    public WorkspaceItem getWs() {
        return ws;
    }
}

/**
 * This class will be used for the list of SingleSpec from the MultiDocument.
 * The method shows which SingleSpec are correctly transformed (green) or not
 * (red).
 */
class MyCellRenderer extends JLabel implements ListCellRenderer {

    @Override
    public MyCellRenderer getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {

        SingleSpec singleSpec = (SingleSpec) value;
        String s = (index + 1) + "     " + singleSpec.getSaItem().toString();
        setText(s);

        if (isSelected) {
            setBackground(list.getSelectionBackground());
            setForeground(list.getSelectionForeground());
        } else {
            //display red or green logic because of the translation has errors or not
            String[] errorlist = singleSpec.getSpecCollector().getErrors();
            if (errorlist.length == 0) {
                setBackground(Color.green);
            } else {
                setBackground(Color.red);
            }
            setForeground(list.getForeground());
        }
        setEnabled(list.isEnabled());
        setFont(list.getFont());
        setOpaque(true);
        return this;

    }
}
