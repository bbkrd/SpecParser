/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package eu.nbdemetra.specParser;

import ec.nbdemetra.ws.WorkspaceItem;
import ec.satoolkit.ISaSpecification;
import ec.tss.sa.SaItem;
import ec.tstoolkit.utilities.Id;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import javax.swing.AbstractAction;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.ListCellRenderer;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.util.Exceptions;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

/**
 * Top component which displays a list of SingleSpecs from the MultiDocument
 */
@ConvertAsProperties(
        dtd = "-//eu.nbdemetra.x13spec//MultiDocSpecWindow//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "MultiDocSpecWindowTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_NEVER
)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "eu.nbdemetra.x13spec.MultiDocSpecWindowTopComponent")

@TopComponent.OpenActionRegistration(
        displayName = "#CTL_MultiDocSpecWindowAction",
        preferredID = "MultiDocSpecWindowTopComponent"
)
@Messages({
    "CTL_MultiDocSpecWindowAction=MultiDocSpecWindow",
    "CTL_MultiDocSpecWindowTopComponent=MultiDocSpecWindow",
    "HINT_MultiDocSpecWindowTopComponent=This is a MultiDocSpecWindow"
})

public final class MultiTopComponent extends TopComponent {

    /* Variables:
     *      spec_array      -   gets all generated SpecCollectors from SaItems of the MultiDocument
     *      activeWindows   -   collects the selected SingleWindows
     *      displayName     -   name of multi document
     */
    private SpecCollector[] spec_array;
    private static Map<String, SingleTopComponent> activeSingleWindows = new HashMap();

//    private String displayName;
    private WorkspaceItem ws;
//    private String id;

    public MultiTopComponent() {

        initComponents();
        setToolTipText(Bundle.HINT_MultiDocSpecWindowTopComponent());

    }

    public MultiTopComponent(WorkspaceItem w) {

        ws = w;
//        id=w.getId()+"";
//        this.displayName = w.getDisplayName();
        initComponents();
        setToolTipText(Bundle.HINT_MultiDocSpecWindowTopComponent());

    }

    public void setSpecArray(SpecCollector[] list) {

        this.spec_array = list;
        this.setSpecList();
    }

    private void setSpecList() {
        /*  This method fill the list in the window 
         *  with the names of the multi processing documents
         */

        DefaultListModel model = new DefaultListModel();
        for (SpecCollector item : spec_array) {
            model.addElement(item);
        }

        specList.setModel(model);
        specList.setCellRenderer(new MyCellRenderer());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        specList = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        errorText = new javax.swing.JTextArea();
        singleSpecName = new javax.swing.JLabel();
        toolBar1 = new javax.swing.JToolBar();
        jButton1 = new javax.swing.JButton();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 32767));
        saveAll = new javax.swing.JButton();
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 32767));
        saveGreen = new javax.swing.JButton();

        specList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        specList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                specListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(specList);

        errorText.setColumns(20);
        errorText.setRows(5);
        errorText.setText(org.openide.util.NbBundle.getMessage(MultiTopComponent.class, "MultiTopComponent.errorText.text")); // NOI18N
        jScrollPane2.setViewportView(errorText);

        singleSpecName.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(singleSpecName, org.openide.util.NbBundle.getMessage(MultiTopComponent.class, "MultiTopComponent.singleSpecName.text")); // NOI18N

        toolBar1.setRollover(true);

        jButton1.setBackground(Color.LIGHT_GRAY);
        org.openide.awt.Mnemonics.setLocalizedText(jButton1, org.openide.util.NbBundle.getMessage(MultiTopComponent.class, "MultiTopComponent.jButton1.text")); // NOI18N
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                loadMtaFiles(evt);
            }
        });
        toolBar1.add(jButton1);
        toolBar1.add(filler1);

        saveAll.setBackground(Color.LIGHT_GRAY);
        org.openide.awt.Mnemonics.setLocalizedText(saveAll, org.openide.util.NbBundle.getMessage(MultiTopComponent.class, "MultiTopComponent.saveAll.text")); // NOI18N
        saveAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAllActionPerformed(evt);
            }
        });
        toolBar1.add(saveAll);
        toolBar1.add(filler2);

        saveGreen.setBackground(Color.LIGHT_GRAY);
        org.openide.awt.Mnemonics.setLocalizedText(saveGreen, org.openide.util.NbBundle.getMessage(MultiTopComponent.class, "MultiTopComponent.saveGreen.text")); // NOI18N
        saveGreen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveGreenActionPerformed(evt);
            }
        });
        toolBar1.add(saveGreen);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jScrollPane1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(singleSpecName)
                            .addComponent(jScrollPane2)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(toolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(toolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(singleSpecName)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2)))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents


    private void specListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_specListMouseClicked
        /*  This method opens the SingleSpecWindow of the selected item 
         *  from the list in front, when you click two times or more on the item.
         *  With one click you see information of the SingleSpec transformation 
         *  on the rigth.
         */
        try {
            if (evt.getClickCount() >= 2) {
                SingleTopComponent window;

                SpecCollector s = spec_array[specList.getSelectedIndex()];
//            int index = singleSpecList.indexOf(s);

                //check for window of selected item in map activeWindows 
                if (!activeSingleWindows.containsKey(specList.getSelectedIndex() + "")) {
                    window = new SingleTopComponent();
                    window.setSpecView(s);
                    window.setDisplayName(s.getName());
                    window.setId(specList.getSelectedIndex() + "");
                    window.open();
                    window.requestActive();
                    activeSingleWindows.put(specList.getSelectedIndex() + "", window);
                } else {
                    window = activeSingleWindows.get(specList.getSelectedIndex() + "");
                    window.setSpecView(s);
                    window.open();
                    window.requestActive();
                }

            } else {
                //transformation information by one click
                //name of the selected document
                singleSpecName.setText(spec_array[specList.getSelectedIndex()].getName());
                //error list of the translated document
                String[] errors = spec_array[specList.getSelectedIndex()].getErrors();
                if (errors.length != 0) {
                    errorText.setText("ERRORS:\n"
                            + "******\n");
                    for (String tmp : errors) {
                        errorText.append(tmp + "\n");
                    }
                } else {
                    errorText.setText("No errors");
                }

            }
        } catch (ArrayIndexOutOfBoundsException e) {
            //daneben geklickt
        }
    }//GEN-LAST:event_specListMouseClicked

    private void saveAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAllActionPerformed
        /*
         * Thid method saves all (in WinX13) transformed (single) Specs of 
         * the MultiDocument list in a folder.
         */

//        String path = System.getProperty("user.home");
//        JFileChooser chooser = new JFileChooser(path);
//        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
//        chooser.showSaveDialog(null);
//        try {
//            File folder = chooser.getSelectedFile();
//            File target = new File(folder + "/" + displayName);
//            target.mkdir();
//
//            FileWriter fw;
//            int index = 0;
//            for (SingleSpec s : singleSpecList) {
//                index++;
//                fw = new FileWriter(new File(target + "/" + index + ".spc"));
//                //hier noch spec schreiben
//                fw.write(s.getId() + "");
//                fw.close();
//            }
//        } catch (IOException ex) {
//            errorText.setText("Nothing happend\n" + ex.getMessage());
//        }
    }//GEN-LAST:event_saveAllActionPerformed

    private void saveGreenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveGreenActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_saveGreenActionPerformed

    private void loadMtaFiles(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_loadMtaFiles

        JFileChooser fc = new JFileChooser();
        fc.setFileFilter(new MyFilter(".mta"));
        fc.setAcceptAllFileFilterUsed(false);

        //for choosing a mta file
        if (fc.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            File mta_File = fc.getSelectedFile();

            try {
                //open this mta file
                FileReader mta_FileReader = new FileReader(mta_File);
                //read all lines of the mta file
                try (BufferedReader mta_BufferedReader = new BufferedReader(mta_FileReader)) {
                    StringBuilder path = new StringBuilder(mta_File.getPath());
                    String tmp = path.substring(0, path.lastIndexOf(mta_File.getName()));

                    String mta_line;
                    SpecCollector specCollector;
                    SaItem item;
                    FileReader spec_FileReader;
                    ArrayList<SpecCollector> spec_List = new ArrayList();
                    String spec_line;
                    StringBuilder spec_StringBuilder;
                    int counter = 0;

                    //for each line in mta file
                    while ((mta_line = mta_BufferedReader.readLine()) != null) {
                        mta_line = mta_line.trim();
                        //try-Block?
                        path = new StringBuilder(tmp);
                        spec_FileReader = new FileReader(new File(path.append(mta_line).append(".SPC").toString()));

                        try (BufferedReader brSpec = new BufferedReader(spec_FileReader)) {
                            spec_StringBuilder = new StringBuilder();
                            while ((spec_line = brSpec.readLine()) != null) {
                                spec_StringBuilder.append(spec_line);
                                spec_StringBuilder.append("\n");
                            }

                            specCollector = new SpecCollector(ws, counter);
                            counter++;
                            specCollector.setWinX13Spec(spec_StringBuilder.toString());
                            specCollector.translate(TranslationTo_Type.JDSpec);

                            item = new SaItem((ISaSpecification) specCollector.getJDSpec().getSpecification(), specCollector.getTs());
                            specCollector.setJDSpec(item.toDocument());

                            spec_List.add(specCollector);

                        }
                    }
                    setSpecArray(spec_List.toArray(new SpecCollector[0]));
                } catch (IOException ex) {
                    Exceptions.printStackTrace(ex);
                }
            } catch (FileNotFoundException ex) {
                JOptionPane.showMessageDialog(null, "File doesn't exist\n" + ex.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(null, "File istn't loaded");
        }
    }//GEN-LAST:event_loadMtaFiles


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea errorText;
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler filler2;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton saveAll;
    private javax.swing.JButton saveGreen;
    private javax.swing.JLabel singleSpecName;
    private javax.swing.JList specList;
    private javax.swing.JToolBar toolBar1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
    }

    @Override
    public void componentClosed() {
        MultiSpec.deleteWindow(ws.getId());
    }

    protected static void deleteWindow(String id) {
        activeSingleWindows.remove(id);
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    public WorkspaceItem getWs() {
        return ws;
    }
}

/**
 * This class will be used for the list of SpecCollectors from the
 * MultiDocument. The method shows which SingleSpec are correctly transformed
 * (green) or not (red).
 */
class MyCellRenderer extends JLabel implements ListCellRenderer {

    @Override
    public MyCellRenderer getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {

//        SingleSpec singleSpec = (SingleSpec) value;
        SpecCollector spec = (SpecCollector) value;
        String s = (index + 1) + "     " + spec.getName();
        setText(s);

        if (isSelected) {
            setBackground(list.getSelectionBackground());
            setForeground(list.getSelectionForeground());
        } else {
            //display red or green logic because of the translation has errors or not
            String[] errorlist = spec.getErrors();
            if (errorlist.length == 0) {
                setBackground(Color.green);
            } else {
                setBackground(Color.red);
            }
            setForeground(list.getForeground());
        }
        setEnabled(list.isEnabled());
        setFont(list.getFont());
        setOpaque(true);
        return this;

    }
}